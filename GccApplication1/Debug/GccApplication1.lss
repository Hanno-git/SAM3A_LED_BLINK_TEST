
GccApplication1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  000804e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  20000434  00080918  00020434  2**2
                  ALLOC
  3 .stack        00000400  20000478  0008095c  00020434  2**0
                  ALLOC
  4 .heap         00000200  20000878  00080d5c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000014e8  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000410  00000000  00000000  0002199e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000098  00000000  00000000  00021dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000098  00000000  00000000  00021e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00021ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000e9c8  00000000  00000000  00021f36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001bea  00000000  00000000  000308fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004726f  00000000  00000000  000324e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000280  00000000  00000000  00079758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	78 08 00 20 65 01 08 00 61 01 08 00 61 01 08 00     x.. e...a...a...
   80010:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
	...
   8002c:	61 01 08 00 61 01 08 00 00 00 00 00 61 01 08 00     a...a.......a...
   8003c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8004c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8005c:	61 01 08 00 61 01 08 00 00 00 00 00 00 00 00 00     a...a...........
   8006c:	61 01 08 00 61 01 08 00 00 00 00 00 00 00 00 00     a...a...........
	...
   80084:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
   80094:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800a4:	00 00 00 00 61 01 08 00 61 01 08 00 61 01 08 00     ....a...a...a...
   800b4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
	...
   800d0:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800e0:	61 01 08 00 61 01 08 00 00 00 00 00 61 01 08 00     a...a.......a...
   800f0:	61 01 08 00                                         a...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	000804e4 	.word	0x000804e4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000804e4 	.word	0x000804e4
   80154:	20000438 	.word	0x20000438
   80158:	000804e4 	.word	0x000804e4
   8015c:	00000000 	.word	0x00000000

00080160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80160:	e7fe      	b.n	80160 <Dummy_Handler>
	...

00080164 <Reset_Handler>:
{
   80164:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80166:	4b11      	ldr	r3, [pc, #68]	; (801ac <Reset_Handler+0x48>)
   80168:	4a11      	ldr	r2, [pc, #68]	; (801b0 <Reset_Handler+0x4c>)
   8016a:	429a      	cmp	r2, r3
   8016c:	d009      	beq.n	80182 <Reset_Handler+0x1e>
   8016e:	4b0f      	ldr	r3, [pc, #60]	; (801ac <Reset_Handler+0x48>)
   80170:	4a0f      	ldr	r2, [pc, #60]	; (801b0 <Reset_Handler+0x4c>)
   80172:	e003      	b.n	8017c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80174:	6811      	ldr	r1, [r2, #0]
   80176:	6019      	str	r1, [r3, #0]
   80178:	3304      	adds	r3, #4
   8017a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   8017c:	490d      	ldr	r1, [pc, #52]	; (801b4 <Reset_Handler+0x50>)
   8017e:	428b      	cmp	r3, r1
   80180:	d3f8      	bcc.n	80174 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80182:	4b0d      	ldr	r3, [pc, #52]	; (801b8 <Reset_Handler+0x54>)
   80184:	e002      	b.n	8018c <Reset_Handler+0x28>
                *pDest++ = 0;
   80186:	2200      	movs	r2, #0
   80188:	601a      	str	r2, [r3, #0]
   8018a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8018c:	4a0b      	ldr	r2, [pc, #44]	; (801bc <Reset_Handler+0x58>)
   8018e:	4293      	cmp	r3, r2
   80190:	d3f9      	bcc.n	80186 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80192:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x5c>)
   80194:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80198:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8019c:	4a09      	ldr	r2, [pc, #36]	; (801c4 <Reset_Handler+0x60>)
   8019e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   801a0:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x64>)
   801a2:	4798      	blx	r3
        main();
   801a4:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x68>)
   801a6:	4798      	blx	r3
   801a8:	e7fe      	b.n	801a8 <Reset_Handler+0x44>
   801aa:	bf00      	nop
   801ac:	20000000 	.word	0x20000000
   801b0:	000804e4 	.word	0x000804e4
   801b4:	20000434 	.word	0x20000434
   801b8:	20000434 	.word	0x20000434
   801bc:	20000478 	.word	0x20000478
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	0008034d 	.word	0x0008034d
   801cc:	00080275 	.word	0x00080275

000801d0 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801d4:	4a20      	ldr	r2, [pc, #128]	; (80258 <SystemInit+0x88>)
   801d6:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   801dc:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801de:	4b1f      	ldr	r3, [pc, #124]	; (8025c <SystemInit+0x8c>)
   801e0:	6a1b      	ldr	r3, [r3, #32]
   801e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   801e6:	d107      	bne.n	801f8 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801e8:	4a1d      	ldr	r2, [pc, #116]	; (80260 <SystemInit+0x90>)
   801ea:	4b1c      	ldr	r3, [pc, #112]	; (8025c <SystemInit+0x8c>)
   801ec:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801ee:	4b1b      	ldr	r3, [pc, #108]	; (8025c <SystemInit+0x8c>)
   801f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   801f2:	f013 0f01 	tst.w	r3, #1
   801f6:	d0fa      	beq.n	801ee <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   801f8:	4a1a      	ldr	r2, [pc, #104]	; (80264 <SystemInit+0x94>)
   801fa:	4b18      	ldr	r3, [pc, #96]	; (8025c <SystemInit+0x8c>)
   801fc:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801fe:	4b17      	ldr	r3, [pc, #92]	; (8025c <SystemInit+0x8c>)
   80200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80202:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80206:	d0fa      	beq.n	801fe <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80208:	4a14      	ldr	r2, [pc, #80]	; (8025c <SystemInit+0x8c>)
   8020a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8020c:	f023 0303 	bic.w	r3, r3, #3
   80210:	f043 0301 	orr.w	r3, r3, #1
   80214:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80216:	4b11      	ldr	r3, [pc, #68]	; (8025c <SystemInit+0x8c>)
   80218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8021a:	f013 0f08 	tst.w	r3, #8
   8021e:	d0fa      	beq.n	80216 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80220:	4a11      	ldr	r2, [pc, #68]	; (80268 <SystemInit+0x98>)
   80222:	4b0e      	ldr	r3, [pc, #56]	; (8025c <SystemInit+0x8c>)
   80224:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80226:	4b0d      	ldr	r3, [pc, #52]	; (8025c <SystemInit+0x8c>)
   80228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8022a:	f013 0f02 	tst.w	r3, #2
   8022e:	d0fa      	beq.n	80226 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80230:	2211      	movs	r2, #17
   80232:	4b0a      	ldr	r3, [pc, #40]	; (8025c <SystemInit+0x8c>)
   80234:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80236:	4b09      	ldr	r3, [pc, #36]	; (8025c <SystemInit+0x8c>)
   80238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8023a:	f013 0f08 	tst.w	r3, #8
   8023e:	d0fa      	beq.n	80236 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80240:	2212      	movs	r2, #18
   80242:	4b06      	ldr	r3, [pc, #24]	; (8025c <SystemInit+0x8c>)
   80244:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80246:	4b05      	ldr	r3, [pc, #20]	; (8025c <SystemInit+0x8c>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f013 0f08 	tst.w	r3, #8
   8024e:	d0fa      	beq.n	80246 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80250:	4a06      	ldr	r2, [pc, #24]	; (8026c <SystemInit+0x9c>)
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <SystemInit+0xa0>)
   80254:	601a      	str	r2, [r3, #0]
   80256:	4770      	bx	lr
   80258:	400e0a00 	.word	0x400e0a00
   8025c:	400e0600 	.word	0x400e0600
   80260:	00370809 	.word	0x00370809
   80264:	01370809 	.word	0x01370809
   80268:	200d3f01 	.word	0x200d3f01
   8026c:	0501bd00 	.word	0x0501bd00
   80270:	20000000 	.word	0x20000000

00080274 <main>:
#include "C:\Atmelproj\GccApplication1\GccApplication1\Inc\pio_init.h"
#include "sam.h"


int main(void)
{
   80274:	b508      	push	{r3, lr}
	/* Initialize variables */
	static uint32_t cnt = 0u;
    /* Initialize the SAM system */
    SystemInit();
   80276:	4b19      	ldr	r3, [pc, #100]	; (802dc <main+0x68>)
   80278:	4798      	blx	r3

	/* Initialize the peripherals */
	PIO_INIT();
   8027a:	4b19      	ldr	r3, [pc, #100]	; (802e0 <main+0x6c>)
   8027c:	4798      	blx	r3
   8027e:	e01e      	b.n	802be <main+0x4a>
		PIOA->PIO_SODR |=(PIO_SODR_P15);//set
		
	    cnt = 0;
	    while (cnt<3600000)
	    {
		    cnt = cnt +1;
   80280:	3301      	adds	r3, #1
   80282:	4a18      	ldr	r2, [pc, #96]	; (802e4 <main+0x70>)
   80284:	6013      	str	r3, [r2, #0]
	    while (cnt<3600000)
   80286:	4b17      	ldr	r3, [pc, #92]	; (802e4 <main+0x70>)
   80288:	681b      	ldr	r3, [r3, #0]
   8028a:	4a17      	ldr	r2, [pc, #92]	; (802e8 <main+0x74>)
   8028c:	4293      	cmp	r3, r2
   8028e:	d9f7      	bls.n	80280 <main+0xc>
	    }
		//   Clear Output Data Register for port B pin 26
		PIOB->PIO_CODR |=(PIO_CODR_P26);//set
   80290:	4a16      	ldr	r2, [pc, #88]	; (802ec <main+0x78>)
   80292:	6b53      	ldr	r3, [r2, #52]	; 0x34
   80294:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   80298:	6353      	str	r3, [r2, #52]	; 0x34
		
		//  Clear Output Data Register for port A pin 15
		PIOA->PIO_CODR |=(PIO_CODR_P15);//set
   8029a:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
   8029e:	6b53      	ldr	r3, [r2, #52]	; 0x34
   802a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   802a4:	6353      	str	r3, [r2, #52]	; 0x34
		
		cnt = 0;
   802a6:	2200      	movs	r2, #0
   802a8:	4b0e      	ldr	r3, [pc, #56]	; (802e4 <main+0x70>)
   802aa:	601a      	str	r2, [r3, #0]
		while (cnt<3600000)
   802ac:	e002      	b.n	802b4 <main+0x40>
		{
			cnt = cnt +1;
   802ae:	3301      	adds	r3, #1
   802b0:	4a0c      	ldr	r2, [pc, #48]	; (802e4 <main+0x70>)
   802b2:	6013      	str	r3, [r2, #0]
		while (cnt<3600000)
   802b4:	4b0b      	ldr	r3, [pc, #44]	; (802e4 <main+0x70>)
   802b6:	681b      	ldr	r3, [r3, #0]
   802b8:	4a0b      	ldr	r2, [pc, #44]	; (802e8 <main+0x74>)
   802ba:	4293      	cmp	r3, r2
   802bc:	d9f7      	bls.n	802ae <main+0x3a>
		PIOB->PIO_SODR |=(PIO_SODR_P26);//set
   802be:	4a0b      	ldr	r2, [pc, #44]	; (802ec <main+0x78>)
   802c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   802c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   802c6:	6313      	str	r3, [r2, #48]	; 0x30
		PIOA->PIO_SODR |=(PIO_SODR_P15);//set
   802c8:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
   802cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   802ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   802d2:	6313      	str	r3, [r2, #48]	; 0x30
	    cnt = 0;
   802d4:	2200      	movs	r2, #0
   802d6:	4b03      	ldr	r3, [pc, #12]	; (802e4 <main+0x70>)
   802d8:	601a      	str	r2, [r3, #0]
	    while (cnt<3600000)
   802da:	e7d4      	b.n	80286 <main+0x12>
   802dc:	000801d1 	.word	0x000801d1
   802e0:	000802f1 	.word	0x000802f1
   802e4:	20000450 	.word	0x20000450
   802e8:	0036ee7f 	.word	0x0036ee7f
   802ec:	400e1000 	.word	0x400e1000

000802f0 <PIO_INIT>:

void PIO_INIT(void)
{
	static uint32_t temp1,temp2;
	// Disables the Write Protect for port B
	PIOB ->PIO_WPMR &=~(PIO_WPMR_WPEN);
   802f0:	4a14      	ldr	r2, [pc, #80]	; (80344 <PIO_INIT+0x54>)
   802f2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   802f6:	f023 0301 	bic.w	r3, r3, #1
   802fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	// Disables the Write Protect for port A
	PIOA ->PIO_WPMR &=~(PIO_WPMR_WPEN);
   802fe:	4b12      	ldr	r3, [pc, #72]	; (80348 <PIO_INIT+0x58>)
   80300:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
   80304:	f021 0101 	bic.w	r1, r1, #1
   80308:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
	
	// reset the Disable register for port B pin 26
	PIOB->PIO_PDR &=~(PIO_PDR_P26);//reset
   8030c:	6851      	ldr	r1, [r2, #4]
   8030e:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
   80312:	6051      	str	r1, [r2, #4]
	
	// reset the Disable register forport A pin 15
	PIOA->PIO_PDR &=~(PIO_PDR_P15);//reset
   80314:	6859      	ldr	r1, [r3, #4]
   80316:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
   8031a:	6059      	str	r1, [r3, #4]
	
	// Enables the PIO to control port B pin 26
	PIOB->PIO_PER &=~(PIO_PER_P26);//reset
   8031c:	6811      	ldr	r1, [r2, #0]
   8031e:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
   80322:	6011      	str	r1, [r2, #0]
	PIOB->PIO_PER |=(PIO_PER_P26);//set
   80324:	6811      	ldr	r1, [r2, #0]
   80326:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
   8032a:	6011      	str	r1, [r2, #0]
	
	// Enables the PIO to control port A pin 15
	PIOA->PIO_PER &=~(PIO_PER_P15);//reset
   8032c:	6819      	ldr	r1, [r3, #0]
   8032e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
   80332:	6019      	str	r1, [r3, #0]
	PIOA->PIO_PER |=(PIO_PER_P15);//set
   80334:	6819      	ldr	r1, [r3, #0]
   80336:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   8033a:	6019      	str	r1, [r3, #0]
	
	// Grabs PIO Controller status for respective pins
	temp1 = (PIOB->PIO_PSR>>25)&(0x0001);//port B pin 26
   8033c:	6892      	ldr	r2, [r2, #8]
	temp2 = (PIOA->PIO_PSR>>15)&(0x0001);//port A pin 15
   8033e:	689b      	ldr	r3, [r3, #8]
   80340:	e7fe      	b.n	80340 <PIO_INIT+0x50>
   80342:	bf00      	nop
   80344:	400e1000 	.word	0x400e1000
   80348:	400e0e00 	.word	0x400e0e00

0008034c <__libc_init_array>:
   8034c:	b570      	push	{r4, r5, r6, lr}
   8034e:	4e0f      	ldr	r6, [pc, #60]	; (8038c <__libc_init_array+0x40>)
   80350:	4d0f      	ldr	r5, [pc, #60]	; (80390 <__libc_init_array+0x44>)
   80352:	1b76      	subs	r6, r6, r5
   80354:	10b6      	asrs	r6, r6, #2
   80356:	bf18      	it	ne
   80358:	2400      	movne	r4, #0
   8035a:	d005      	beq.n	80368 <__libc_init_array+0x1c>
   8035c:	3401      	adds	r4, #1
   8035e:	f855 3b04 	ldr.w	r3, [r5], #4
   80362:	4798      	blx	r3
   80364:	42a6      	cmp	r6, r4
   80366:	d1f9      	bne.n	8035c <__libc_init_array+0x10>
   80368:	4e0a      	ldr	r6, [pc, #40]	; (80394 <__libc_init_array+0x48>)
   8036a:	4d0b      	ldr	r5, [pc, #44]	; (80398 <__libc_init_array+0x4c>)
   8036c:	f000 f8a8 	bl	804c0 <_init>
   80370:	1b76      	subs	r6, r6, r5
   80372:	10b6      	asrs	r6, r6, #2
   80374:	bf18      	it	ne
   80376:	2400      	movne	r4, #0
   80378:	d006      	beq.n	80388 <__libc_init_array+0x3c>
   8037a:	3401      	adds	r4, #1
   8037c:	f855 3b04 	ldr.w	r3, [r5], #4
   80380:	4798      	blx	r3
   80382:	42a6      	cmp	r6, r4
   80384:	d1f9      	bne.n	8037a <__libc_init_array+0x2e>
   80386:	bd70      	pop	{r4, r5, r6, pc}
   80388:	bd70      	pop	{r4, r5, r6, pc}
   8038a:	bf00      	nop
   8038c:	000804cc 	.word	0x000804cc
   80390:	000804cc 	.word	0x000804cc
   80394:	000804d4 	.word	0x000804d4
   80398:	000804cc 	.word	0x000804cc

0008039c <register_fini>:
   8039c:	4b02      	ldr	r3, [pc, #8]	; (803a8 <register_fini+0xc>)
   8039e:	b113      	cbz	r3, 803a6 <register_fini+0xa>
   803a0:	4802      	ldr	r0, [pc, #8]	; (803ac <register_fini+0x10>)
   803a2:	f000 b805 	b.w	803b0 <atexit>
   803a6:	4770      	bx	lr
   803a8:	00000000 	.word	0x00000000
   803ac:	000803bd 	.word	0x000803bd

000803b0 <atexit>:
   803b0:	2300      	movs	r3, #0
   803b2:	4601      	mov	r1, r0
   803b4:	461a      	mov	r2, r3
   803b6:	4618      	mov	r0, r3
   803b8:	f000 b81e 	b.w	803f8 <__register_exitproc>

000803bc <__libc_fini_array>:
   803bc:	b538      	push	{r3, r4, r5, lr}
   803be:	4c0a      	ldr	r4, [pc, #40]	; (803e8 <__libc_fini_array+0x2c>)
   803c0:	4d0a      	ldr	r5, [pc, #40]	; (803ec <__libc_fini_array+0x30>)
   803c2:	1b64      	subs	r4, r4, r5
   803c4:	10a4      	asrs	r4, r4, #2
   803c6:	d00a      	beq.n	803de <__libc_fini_array+0x22>
   803c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   803cc:	3b01      	subs	r3, #1
   803ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   803d2:	3c01      	subs	r4, #1
   803d4:	f855 3904 	ldr.w	r3, [r5], #-4
   803d8:	4798      	blx	r3
   803da:	2c00      	cmp	r4, #0
   803dc:	d1f9      	bne.n	803d2 <__libc_fini_array+0x16>
   803de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   803e2:	f000 b877 	b.w	804d4 <_fini>
   803e6:	bf00      	nop
   803e8:	000804e4 	.word	0x000804e4
   803ec:	000804e0 	.word	0x000804e0

000803f0 <__retarget_lock_acquire_recursive>:
   803f0:	4770      	bx	lr
   803f2:	bf00      	nop

000803f4 <__retarget_lock_release_recursive>:
   803f4:	4770      	bx	lr
   803f6:	bf00      	nop

000803f8 <__register_exitproc>:
   803f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   803fc:	4d2c      	ldr	r5, [pc, #176]	; (804b0 <__register_exitproc+0xb8>)
   803fe:	4606      	mov	r6, r0
   80400:	6828      	ldr	r0, [r5, #0]
   80402:	4698      	mov	r8, r3
   80404:	460f      	mov	r7, r1
   80406:	4691      	mov	r9, r2
   80408:	f7ff fff2 	bl	803f0 <__retarget_lock_acquire_recursive>
   8040c:	4b29      	ldr	r3, [pc, #164]	; (804b4 <__register_exitproc+0xbc>)
   8040e:	681c      	ldr	r4, [r3, #0]
   80410:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80414:	2b00      	cmp	r3, #0
   80416:	d03e      	beq.n	80496 <__register_exitproc+0x9e>
   80418:	685a      	ldr	r2, [r3, #4]
   8041a:	2a1f      	cmp	r2, #31
   8041c:	dc1c      	bgt.n	80458 <__register_exitproc+0x60>
   8041e:	f102 0e01 	add.w	lr, r2, #1
   80422:	b176      	cbz	r6, 80442 <__register_exitproc+0x4a>
   80424:	2101      	movs	r1, #1
   80426:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8042a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8042e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80432:	4091      	lsls	r1, r2
   80434:	4308      	orrs	r0, r1
   80436:	2e02      	cmp	r6, #2
   80438:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8043c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80440:	d023      	beq.n	8048a <__register_exitproc+0x92>
   80442:	3202      	adds	r2, #2
   80444:	f8c3 e004 	str.w	lr, [r3, #4]
   80448:	6828      	ldr	r0, [r5, #0]
   8044a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8044e:	f7ff ffd1 	bl	803f4 <__retarget_lock_release_recursive>
   80452:	2000      	movs	r0, #0
   80454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80458:	4b17      	ldr	r3, [pc, #92]	; (804b8 <__register_exitproc+0xc0>)
   8045a:	b30b      	cbz	r3, 804a0 <__register_exitproc+0xa8>
   8045c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80460:	f3af 8000 	nop.w
   80464:	4603      	mov	r3, r0
   80466:	b1d8      	cbz	r0, 804a0 <__register_exitproc+0xa8>
   80468:	2000      	movs	r0, #0
   8046a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8046e:	f04f 0e01 	mov.w	lr, #1
   80472:	6058      	str	r0, [r3, #4]
   80474:	6019      	str	r1, [r3, #0]
   80476:	4602      	mov	r2, r0
   80478:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8047c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80480:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80484:	2e00      	cmp	r6, #0
   80486:	d0dc      	beq.n	80442 <__register_exitproc+0x4a>
   80488:	e7cc      	b.n	80424 <__register_exitproc+0x2c>
   8048a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8048e:	4301      	orrs	r1, r0
   80490:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80494:	e7d5      	b.n	80442 <__register_exitproc+0x4a>
   80496:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8049a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8049e:	e7bb      	b.n	80418 <__register_exitproc+0x20>
   804a0:	6828      	ldr	r0, [r5, #0]
   804a2:	f7ff ffa7 	bl	803f4 <__retarget_lock_release_recursive>
   804a6:	f04f 30ff 	mov.w	r0, #4294967295
   804aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   804ae:	bf00      	nop
   804b0:	20000430 	.word	0x20000430
   804b4:	000804bc 	.word	0x000804bc
   804b8:	00000000 	.word	0x00000000

000804bc <_global_impure_ptr>:
   804bc:	20000008                                ... 

000804c0 <_init>:
   804c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   804c2:	bf00      	nop
   804c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   804c6:	bc08      	pop	{r3}
   804c8:	469e      	mov	lr, r3
   804ca:	4770      	bx	lr

000804cc <__init_array_start>:
   804cc:	0008039d 	.word	0x0008039d

000804d0 <__frame_dummy_init_array_entry>:
   804d0:	00080119                                ....

000804d4 <_fini>:
   804d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   804d6:	bf00      	nop
   804d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   804da:	bc08      	pop	{r3}
   804dc:	469e      	mov	lr, r3
   804de:	4770      	bx	lr

000804e0 <__fini_array_start>:
   804e0:	000800f5 	.word	0x000800f5
